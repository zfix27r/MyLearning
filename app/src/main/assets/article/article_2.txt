5|Выделите аспекты приложения, которые могут изменяться, и отделите их от тех, которые всегда остаются постоянными.\nИначе говоря, если некий аспект кода изменяется (допустим, с введением новых требований), то его необходимо отделить от тех аспектов, которые остаются неизменными.\nДругая формулировка того же принципа: выделите переменные составляющие и инкапсулируйте их, чтобы позднее их можно было изменять или расширять без воздействия на постоянные составляющие.||1
8|Традиционно в полях объекта могут храниться не только обычные переменные стандартных типов, но и другие объекты. А эти объекты могут в свою очередь хранить какие-то другие объекты и так далее, образуя дерево (иногда граф) объектов. Это отношение называется ассоциацией.|https://habr.com/ru/post/463125/|
9|Жизненный цикл дочернего объекта совпадает с жизненным циклом родительского.|https://habr.com/ru/post/463125/|
9|Отдавайте предпочтение композиции перед наследованием.||1
10|Жизненный цикл дочернего объекта не зависит от жизненного цикла родительского, и может использоваться другими объектами.|https://habr.com/ru/post/463125/|
11|«Интерфейс» в данном случае означает «супертип».\nСобственно, главной целью применения полиморфизма посредством программирования на уровне супертипа является как раз отсутствие жесткой привязки к конкретному объекту во время выполнения. Или, другими словами, «переменные должны объявляться с супертипом (обычно абстрактным классом или интерфейсом), чтобы присваиваемые им объекты могли относиться к любой конкретной реализации супертипа».||1
12|Стремитесь к слабой связанности взаимодействующих объектов. Когда два объекта слабо связаны, они могут взаимодействовать друг с другом, но обычно обладают минимумом информации друг о друге||1







topicId|description|sourceUrl|bookId
([0-9]+)\|([\W\\n]+)\|\|([0-9]+)
  {
    "parentId": $1,
    "description": "$2",
    "sourceUrl": "",
    "bookId": $3,
    "difficultyLevel": 0,
    "usability": 0,
    "updateAt": 0
  },