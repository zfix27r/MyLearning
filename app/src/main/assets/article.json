[
  {
    "parentId": 2,
    "description": "Выделите аспекты приложения, которые могут изменяться, и отделите их от тех, которые всегда остаются постоянными.\nИначе говоря, если некий аспект кода изменяется (допустим, с введением новых требований), то его необходимо отделить от тех аспектов, которые остаются неизменными.\nДругая формулировка того же принципа: выделите переменные составляющие и инкапсулируйте их, чтобы позднее их можно было изменять или расширять без воздействия на постоянные составляющие.",
    "sourceUrl": "",
    "bookId": 1,
    "difficultyLevel": 0,
    "usability": 0,
    "updateAt": 0
  },
  {
    "parentId": 3,
    "description": "Отдавайте предпочтение композиции перед наследованием.",
    "sourceUrl": "",
    "bookId": 1,
    "difficultyLevel": 0,
    "usability": 0,
    "updateAt": 0
  },
  {
    "parentId": 4,
    "description": "«Интерфейс» в данном случае означает «супертип».\nСобственно, главной целью применения полиморфизма посредством программирования на уровне супертипа является как раз отсутствие жесткой привязки к конкретному объекту во время выполнения. Или, другими словами, «переменные должны объявляться с супертипом (обычно абстрактным классом или интерфейсом), чтобы присваиваемые им объекты могли относиться к любой конкретной реализации супертипа».",
    "sourceUrl": "",
    "bookId": 1,
    "difficultyLevel": 0,
    "usability": 0,
    "updateAt": 0
  },
  {
    "parentId": 5,
    "description": "Стремитесь к слабой связанности взаимодействующих объектов. Когда два объекта слабо связаны, они могут взаимодействовать друг с другом, но обычно обладают минимумом информации друг о друге",
    "sourceUrl": "",
    "bookId": 1,
    "difficultyLevel": 0,
    "usability": 0,
    "updateAt": 0
  }
]